<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
				http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
		        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
				">
    <!-- 1.自动扫描与装配bean， 检查@Controller，@Service，@repository等，并注入对象 -->
    <context:component-scan base-package="com.yongjie.ZhiJianSbpt"></context:component-scan>
    <!-- 2.非常重要，隐式注册了多个对注释进行解析处理的处理器，如AutowiredAnnotationBeanPostProcessor,CommonAnnotationBeanPostProcessor,
    PersistenceAnnotationBeanPostProcessor,RequiredAnnotationBeanPostProcessor
     -->
    <context:annotation-config/>

    <!-- 3.导入外部的properties文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbcUrl}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <property name="maxActive" value="10"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="90000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="1800000"/>
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="log4j,stat"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超时时间；单位为秒。180秒=3分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
    </bean>

    <!-- 5:创建sessionFactory，这是spring整合hibernate的入口 -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <!-- 指定hibernate的配置文件位置 -->
        <property name="configLocation" value="${configLocation}"></property>

        <property name="dataSource" ref="dataSource"></property>

    </bean>
    <!-- 6:创建事务管理器 -->
    <bean id="txManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- 7:以注解的形式管理事务 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <!-- 8:设置事务属性 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 所有方法均加入事务处理 -->
            <tx:method name="*"/>
            <!-- 所有查询方法的事务设置为只读 -->
            <tx:method name="search*" read-only="true"/>
            <!-- 限定属性的getter和setter方法不加入事务处理 -->
            <tx:method name="get*" propagation="NOT_SUPPORTED"/>
            <tx:method name="set*" propagation="NOT_SUPPORTED"/>
        </tx:attributes>
    </tx:advice>
</beans>
    